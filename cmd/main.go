package main

import (
	"context"
	"crm-backend/internal/admin"
	"crm-backend/internal/auth"
	"crm-backend/internal/db"
	"crm-backend/internal/employee"
	"crm-backend/internal/shop"
	"fmt"
	"log"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/go-chi/chi/v5/middleware"
	"github.com/go-chi/cors"
)

// –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
func getPostgresDSN() string {
	dsn := os.Getenv("POSTGRES_DSN")
	if dsn == "" {
		dsn = "postgres://crm_user:crm_pass@localhost:5433/crm_db"
	}
	return dsn
}

func main() {
	// 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
	database, err := initDB()
	if err != nil {
		log.Fatal(err)
	}
	defer database.Close()

	// 2. –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
	if err := runMigrations(database); err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:", err)
	}

	// 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏, —Å–µ—Ä–≤–∏—Å—ã, —Ö–µ–Ω–¥–ª–µ—Ä—ã
	adminRepo := admin.NewRepository(database)
	adminService := admin.NewService(adminRepo)
	adminHandler := admin.NewHandler(adminService)

	// –°–æ–∑–¥–∞—ë–º —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–π
	if err := adminRepo.InitSuperAdmin(); err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞:", err)
	}

	shopRepo := shop.NewRepository(database)
	shopService := shop.NewService(shopRepo)
	shopHandler := shop.NewHandler(shopService)

	employeeRepo := employee.NewRepository(database)
	employeeService := employee.NewService(employeeRepo)
	employeeHandler := employee.NewHandler(employeeService)

	// 4. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã —Å CORS
	r := setupRoutes(adminHandler, shopHandler, employeeHandler)

	// 5. –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä —Å graceful shutdown
	srv := &http.Server{
		Addr:    ":8080",
		Handler: r,
	}

	go func() {
		fmt.Println("Server running on :8080")
		if err := srv.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			log.Fatalf("ListenAndServe error: %v", err)
		}
	}()

	// –û–∂–∏–¥–∞–µ–º SIGINT (Ctrl+C) –∏–ª–∏ SIGTERM
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit

	fmt.Println("Shutting down server...")

	// –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Ä–≤–µ—Ä –∑–∞ 5 —Å–µ–∫—É–Ω–¥
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	if err := srv.Shutdown(ctx); err != nil {
		log.Fatal("Server forced to shutdown:", err)
	}

	fmt.Println("Server exiting")
}

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
func initDB() (*db.DB, error) {
	dsn := getPostgresDSN()
	database, err := db.NewDB(dsn)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ: %w", err)
	}
	return database, nil
}

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –º–∏–≥—Ä–∞—Ü–∏–π
func runMigrations(database *db.DB) error {
	adminRepo := admin.NewRepository(database)
	if err := adminRepo.Migrate(); err != nil {
		return fmt.Errorf("–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ admin/users: %w", err)
	}

	shopRepo := shop.NewRepository(database)
	if err := shopRepo.Migrate(); err != nil {
		return fmt.Errorf("–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ shops: %w", err)
	}
	if err := shopRepo.MigrateItems(); err != nil {
		return fmt.Errorf("–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ items: %w", err)
	}

	employeeRepo := employee.NewRepository(database)
	if err := employeeRepo.Migrate(); err != nil {
		return fmt.Errorf("–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ employees: %w", err)
	}

	return nil
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ—É—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π CORS
func setupRoutes(
	adminHandler *admin.Handler,
	shopHandler *shop.Handler,
	employeeHandler *employee.Handler,
) *chi.Mux {
	r := chi.NewRouter()

	// üåü –î–æ–±–∞–≤–ª—è–µ–º CORS middleware
	r.Use(cors.Handler(cors.Options{
		AllowedOrigins:   []string{"http://localhost:3000"}, // –§—Ä–æ–Ω—Ç–µ–Ω–¥
		AllowedMethods:   []string{"GET", "POST", "PUT", "DELETE", "OPTIONS"},
		AllowedHeaders:   []string{"Accept", "Authorization", "Content-Type", "X-CSRF-Token"},
		ExposedHeaders:   []string{"Link"},
		AllowCredentials: true,
		MaxAge:           300, // 5 –º–∏–Ω—É—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è CORS
	}))

	// –ü–æ–ª–µ–∑–Ω—ã–µ middleware
	r.Use(middleware.Recoverer)
	r.Use(middleware.Logger)

	// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
	r.Post("/admin/login", adminHandler.Login)

	// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
	r.Route("/admin/users", func(r chi.Router) {
		r.Use(auth.AuthMiddleware)
		r.Get("/", adminHandler.GetUsers)
		r.Post("/", adminHandler.CreateUser)
		r.Put("/{id}", adminHandler.UpdateUser)
		r.Delete("/{id}", adminHandler.DeleteUser)
	})

	// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞–º–∏
	r.Route("/admin/shops", func(r chi.Router) {
		r.Use(auth.AuthMiddleware)
		r.Post("/", shopHandler.CreateShopHandler)
		r.Get("/", shopHandler.GetShopsHandler)
	})

	// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞–º–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞
	r.Route("/owner/shops", func(r chi.Router) {
		r.Use(auth.AuthMiddleware)
		r.Get("/", shopHandler.GetShopsByOwner)

		// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏ –º–∞–≥–∞–∑–∏–Ω–∞
		r.Route("/{id}/employees", func(r chi.Router) {
			r.Post("/", employeeHandler.AddEmployee)
			r.Get("/", employeeHandler.GetEmployeesByShop)
			r.Delete("/{employee_id}", employeeHandler.RemoveEmployee)
		})
	})

	return r
}
